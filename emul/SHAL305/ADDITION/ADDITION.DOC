Эмулятор ZX-Spectrum  3.05
(c) 1995-1999 Николай Шалаев

                       РУКОВОДСТВО ПРОГРАММИСТА


                   Общие положения и структура модуля

Модуль для эмулятора пишется в формате DOS/4G (OS/2 Linear Executable) DLL.
Модуль содержит 32-битные короткие (NEAR) идентификаторы. С помощью
конвертора "Конвертор модулей для эмулятора ZX-Spectrum" (файл DLL2ADD.EXE)
полученную DLL можно отконвертировать в файл модуля, который поддерживается
эмулятором.

Из модулей доступны все функции DPMI, а также функции DOS (32-битного
DOS-Extender).


           Подпрограммы в модулях, поддерживаемые эмулятором

Модули могут содержать подпрограммы, которые будут подключены к эмулятору и
будут вызываться из эмулятора в определенных ситуациях (названия
подпрограмм и ситуации, в которых они вызываются описываются ниже). Также
модуль может содержать идентификаторы _DSC (описание) и _CFG (конфигу-
рация), описанные ниже.


Подпрограмма _INI

  Описание
    Эта подпрограмма вызывается при подключении модуля.

  Объявление
    void _INI(EmuData *Tbl,unsigned Id);

  Вход:
    EAX  Tbl    - адрес таблицы данных эмулятора (Таблица 1)
    EBX  Id     - идентификационный номер модуля


Подпрограмма _UNI

  Описание
    Эта подпрограмма вызывается перед снятием модуля.

  Объявление
    void _UNI();


Подпрограмма _ON_

  Описание
    Эта подпрограмма вызывается перед каждым запуском эмуляции.

  Объявление
    void _ON_();


Подпрограмма _OFF

  Описание
    Эта подпрограмма вызывается при выходе из режима эмуляции.

  Объявление
    void _OFF();


Подпрограммы _F7_, _F8_, _F9_, _F10, _F11 и _F12

  Описание
    Эти подпрограммы вызываются при нажатии клавиш F7, F8, F9, F10, F11 и
    F12 соответственно. Подпрограммы вызываются только из режима эмуляции.

  Объявление
    void _FXX();


Подпрограмма _CPU

  Описание
    Эта подпрограмма вызывается после каждой команды процессора при
    включенном флаге трассировки. Флаг трассировки включается функцией
    CPUTraceOn, а выключается CPUTraceOff. Ссылки на эти функции есть
    в таблице данных эмулятора.

  Объявление
    unsigned _CPU(unsigned Code);

  Вход:
    DH          - регистр A
    DL          - регистр F (кроме 3 и 5 бита)
    CH          - 3 и 5 биты соответствуют 3 и 5 битам флагового регистра
    CL          - младшие 7 бит регистра R (7-ой бит находится в таблице
                  данных эмулятора)
    EDI         - регистр PC
    ESI         - регистр SP
    AL   Code   - код команды, которая будет выполняться

  Выход:
    DH          - регистр A
    DL          - регистр F (кроме 3 и 5 бита)
    CH          - 3 и 5 биты соответствуют 3 и 5 битам флагового регистра
    CL          - младшие 7 бит регистра R (7-ой бит находится в таблице
                  данных эмулятора)
    EDI         - регистр PC
    ESI         - регистр SP
    AL   return - код команды, которая будет выполняться

  Примечание
    Чтобы в этой подпрограмме изменить значения регистров эмулируемого
    процессора (PC, SP, AF, R), которые передаются в эту подпрограмму в
    регистрах, нужно изменять значения регистров (EDI, ESI, EDX и CH, CL
    соответственно). Значения регистров PC, SP, AF и R эмулироемого
    процессора в таблице данных эмулятора могут оказаться неверными.


Подпрограмма _INT

  Описание
    Эта подпрограмма вызывается перед каждым прерыванием.

  Объявление
    unsigned char _INT(unsigned P,unsigned S,unsigned A,unsigned R);

  Вход:
    DH   A      - регистр A
    DL   A      - регистр F (кроме 3 и 5 бита)
    CH   R      - 3 и 5 биты соответствуют 3 и 5 битам флагового регистра
    CL   R      - младшие 7 бит регистра R (7-ой бит находится в таблице
                  данных эмулятора)
    EDI  P      - регистр PC
    ESI  S      - регистр SP

  Выход:
    DH          - регистр A
    DL          - регистр F (кроме 3 и 5 бита)
    CH          - 3 и 5 биты соответствуют 3 и 5 битам флагового регистра
    CL          - младшие 7 бит регистра R (7-ой бит находится в таблице
                  данных эмулятора)
    EDI         - регистр PC
    ESI         - регистр SP
    AH=0 return - обработка прерывания ведется эмулятором или следующими
                  модулями
    AH<>0 return - пропуск прерывания

  Примечание
    Значения регистров PC, SP, AF и R эмулироемого процессора в таблице
    данных эмулятора могут оказаться неверными.


Подпрограмма _ITP

  Описание
    Эта подпрограмма вызывается после каждого прерывания.

  Объявление
    void _ITP(unsigned P,unsigned S,unsigned A,unsigned R);

  Вход:
    DH   A      - регистр A
    DL   A      - регистр F (кроме 3 и 5 бита)
    CH   R      - 3 и 5 биты соответствуют 3 и 5 битам флагового регистра
    CL   R      - младшие 7 бит регистра R (7-ой бит находится в таблице
                  данных эмулятора)
    EDI  P      - регистр PC
    ESI  S      - регистр SP

  Выход:
    DH          - регистр A
    DL          - регистр F (кроме 3 и 5 бита)
    CH          - 3 и 5 биты соответствуют 3 и 5 битам флагового регистра
    CL          - младшие 7 бит регистра R (7-ой бит находится в таблице
                  данных эмулятора)
    EDI         - регистр PC
    ESI         - регистр SP

  Примечание
    Значения регистров PC, SP, AF и R эмулироемого процессора в таблице
    данных эмулятора могут оказаться неверными.


Подпрограмма _MEM

  Описание
    Эта подпрограмма вызывается при каждом переключении страниц, кроме
    установки активности TR-DOS.

  Объявление
    void _MEM();


Подпрограмма _IN_

  Описание
    Эта подпрограмма вызывается при чтении из порта перед обработкой порта
    эмулятором.

  Объявление
    unsigned _IN_(word Port);

  Вход:
    BX   Port   - адрес порта

  Выход:
    AH=0 return - обработка порта ведется эмулятором или следующими
                  модулями
    AH<>0 return - регистр AL содержит значение, которое должно быть
                  считано с порта
    AL   return - (если AH<>0) значение, считанное с порта


Подпрограмма _INP

  Описание
    Эта подпрограмма вызывается при чтении из порта после обработки порта
    эмулятором.

  Объявление
    unsigned char _INP(word Port,byte Val);

  Вход:
    BX   Port   - адрес порта
    AL   Val    - значение, считанное с порта

  Выход:
    AL   return - значение, считанное с порта (если данный модуль
                  поддерживает некоторые биты порта, то он может
                  модифицировать эти биты)


Подпрограмма _OUT

  Описание
    Эта подпрограмма вызывается при записи в порт перед обработкой порта
    эмулятором.

  Объявление
    unsigned char _OUT(word Port,byte Val);

  Вход:
    BX   Port   - адрес порта
    AL   Val    - значение, записываемое в порт

  Выход:
    AH=0 return - обработка порта ведется эмулятором или следующими
                  модулями
    AH<>0 return - порт обработан


Подпрограмма _OUP

  Описание
    Эта подпрограмма вызывается при записи в порт после обработки порта
    эмулятором.

  Объявление
    void _OUT(word Port,byte Val);

  Вход:
    BX   Port   - адрес порта
    AL   Val    - значение, записываемое в порт


Подпрограмма _VG_

  Описание
    Эта подпрограмма вызывается при любом обращении к ВГ, в том числе Reset
    ВГ, инициализация, снятие диска. Подпрограмма вызывается перед
    обработкой обращения эмулятором.

  Объявление
    unsigned char _VG_();

  Выход:
    AH=0 return - обработка ведется эмулятором или следующими модулями
    AH<>0 return - обращение к ВГ обработано


Подпрограмма _VGP

  Описание
    Эта подпрограмма вызывается при любом обращении к ВГ, в том числе Reset
    ВГ, инициализация, снятие диска. Подпрограмма вызывается после
    обработки обращения эмулятором.

  Объявление
    void _VGP();


Подпрограмма _AY_

  Описание
    Эта подпрограмма вызывается при записи любого регистра AY, а также
    Reset, инициализации, запуске эмуляции, выходе из эмуляции, коррекции
    уровня огибающей. Подпрограмма вызывается перед обработкой обращения
    эмулятором.

  Объявление
    unsigned char _AY_(unsigned Index,unsigned char Val);

  Вход:
    EBX  Index  - функция:
                  00h-0Dh (AY_REG0-AY_REGD) - запись регистра AY (значение
                       регистра находится в регистре AL)
                  0Eh (AY_ON) - включение звука
                  0Fh (AY_OFF) - выключение звука
                  10h (AY_RESET) - reset AY
                  11h (AY_INIT) - инициализация звуковой карты
                  12h (AY_ENVELOPE) - коррекция уровня огибающей
                       (вызывается с частотой прерываний таймера -
                       1193180/TimerRate)
    AL   Val    - значение регистра (если EBX=00h-0Dh)

  Выход:
    AH=0 return - обработка ведется эмулятором или следующими модулями.
    AH<>0 return - обращение к AY обработано.


Подпрограмма _SET

  Описание
    Эта подпрограмма вызывается при вызове конфигурации эмулятора.

  Объявление
    void _SET();


Подпрограмма _RES

  Описание
    Эта подпрограмма вызывается при Reset.

  Объявление
    void _RES();


Подпрограмма _INS

  Описание
    Эта подпрограмма вызывается после загрузки конфигурации, после
    подключения модуля в эмуляторе и после установки конфигурации
    в функции _SET.

  Объявление
    void _INS();


                      Таблица данных эмулятора

Таблица 1. Таблица данных эмулятора
Смещение Длина     Имя поля    Описание
+0000h   3Ch BYTEs DataCPU     Таблица данных CPU (таблица 2).
+003Ch   20h BYTEs AY          Таблица данных AY (таблица 3).
+005Ch   10h BYTEs VG	       Таблица данных контроллера дисковода
			       (таблица 4).
+006Ch   DWORD     SpecRAM     Адрес RAM Spectrum. Указатель на буфер,
			       размером 1M, который используется эмулятором,
			       как RAM. RAM располагаются в следующем порядке:
			       Смещение +00000h - сегмент 00h,
			       Смещение +04000h - сегмент 01h,
			       ...
			       Смещение +FC000h - сегмент 3Fh,
+0070h   DWORD     SpecROM     Адрес ROM Spectrum. Указатель на буфер,
			       размером 64k, который используется эмулятором,
			       как ROM. ROM располагаются в следующем порядке:
			       Смещение +0000h - ROM 128,
			       Смещение +4000h - ROM 48,
			       Смещение +8000h - ROM TR-DOS,
			       Смещение +C000h - Любое пользовательское ПЗУ.
+0074h   4 DWORDs  SpecSeg     Таблица сегментов Spectrum. Содержит адреса
			       сегментов, подключенных к адресам: 0000h,
			       4000h, 8000h и C000h.
+0084h   DWORD     TimerRate   Значение счетчика таймера.
+0088h   DWORD     OpCPU       Адрес таблицы, содержащей адреса подпрограмм,
			       обработки команд процессора. Формат таблицы:
			       Смещение +0000h - основной набор команд.
					+0000h - команда 00h
					+0004h - команда 01h
					...
			       Смещение +0400h - команды с префиксом CBh.
					+0400h - команда CB00h
					+0404h - команда CB01h
					...
			       Смещение +0800h - команды с префиксом EDh.
			       Смещение +0C00h - команды с префиксами
						 DDh и FDh.
			       Смещение +1000h - команды с префиксами
						 DDCBh и FDCBh.
+008Ch   DWORD     MemAlloc    Выделение памяти.
+0090h   DWORD     MemFree     Освобождение памяти.
+0094h   DWORD     TextMode    Включение текстового видеорежима.
+0098h   DWORD     SpecMode    Включение видеорежима Spectrum.
+009Ch   DWORD     SetSpec     Включение эмуляции Spectrum.
+00A0h   DWORD     CPUTraceOn  Включение трассировки процессора.
+00A4h   DWORD     CPUTraceOff Выключение трассировки процессора.
+00A8h   DWORD     WinCreate   Создание окна.
+00ACh   DWORD     WinRemove   Удаление окна.
+00B0h   DWORD     WinTitle    Создание заголовка окна.
+00B4h   DWORD     WinHelp     Установка помощи для окна.
+00B8h   DWORD     WinText     Печать текста в окно.
+00BCh   DWORD     WinExe      Запуск интерфейса.
+00C0h   DWORD     WinResult   Установка результатов.
+00C4h   DWORD     SetButton   Кнопка.
+00C8h   DWORD     SetCheckBox Флажок.
+00CCh   DWORD     SetRadio    Переключатель.
+00D0h   DWORD     SetInputTxt Строка ввода.
+00D4h   DWORD     SetInputNum Строка для числа.
+00D8h   DWORD     FileBox     Выбор файла в строку ввода.
+00DCh   DWORD     MessageBox  Сообщение.
+00E0h   DWORD     VidByte     Запись в видеопамять ZX-Spectrum. После записи
			       в память ZX-Spectrum, если записываемый байт
			       попал в видеопамять надо отобразить изменения
			       на экране. Для этого предназначена данная
			       подпрограмма. Перед вызовом необходимо
			       убедиться в том, что записываемый байт попал
			       в видеопамять. При вызове регистр EBX должен
			       содержать смещение в памяти ZX-Spectrum-14000h.
			       Данная подпрограмма не рекомендуется для
			       использования (используйте VidByteAdv).
+00E4h   DWORD     Keys        Адрес таблицы нажатых клавиш. Формат таблицы:
			       Смещение +0000h бит 0 - положение клавиши
				 с кодом 00h (0 - отпущена, 1 - нажата).
			       Смещение +0000h бит 1 - положение клавиши
				 с кодом 01h.
			       ...
			       Смещение +0001h бит 0 - положение клавиши
				 с кодом 08h.
			       ...
			       Смещение +000Fh бит 7 - положение клавиши
				 с кодом 7Fh.
			       Смещение +0010h бит 0 - положение клавиши
				 с кодом E0h 00h.
			       ...
			       Смещение +001Fh бит 7 - положение клавиши
				 с кодом E0h 7Fh.
+00E8h   BYTE      Port7FFD    Значение порта 7FFD.
+00E9h   BYTE      	       Флаги эмулятора.
			       Бит 0 - (IntWait) Ожидание прерывания.
			       Бит 1 - (Trace) Трассировка. Если этот бит
				 установлен, то эмулятор работает в режиме
				 трассировки. Не изменяйте этот бит - для
				 включения и выключения трассировки
				 используйте подпрограммы CPUTraceOn и
				 CPUTraceOff.
			       Бит 2 - (IntLast) Последнее прерывание. Этот
				 бит устанавливается или сбрасывается перед
				 вызовом подпрограммы _INT. Если он
				 установлен, то данный вызов _INT последний в
				 этом импульсе прерывания (При значении 1
				 опции "Длительность прерывания" установлен
				 всегда).
			       Бит 3 - (Lang) Язык эмулятора (0 - русский,
				 1 - английский).
+00EDh   BYTE      PortFE      Значение порта FE.
+00EEh   BYTE      VerMinor    Подверсия эмулятора.
+00EFh   BYTE      VerMajor    Версия эмулятора.
+00F0h   DWORD     ProcVG      Вызов ВГ (при вызове регистр EBX должен
			       содержать код операции для контроллера
			       дисковода).
+00F4h   4 DWORDs  Disks       Адреса имен файлов образа диска.
+0104h   DWORD     ArgC        Количество параметров командной строки.
+0108h   DWORD     ArgV        Адрес указателей на массив параметров
			       командной строки.
+010Ch   DWORD     PortIn      Чтение из порта.
+0110h   DWORD     PortOut     Запись в порт.
+0114h   DWORD     VidByteAdv  Запись в видеопамять ZX-Spectrum с проверкой
			       попадания. После записи в память ZX-Spectrum,
			       если записываемый байт попал в видеопамять
			       надо отобразить изменения на экране. Данная
			       подпрограмма проверяет попадание в видеопамять
			       и, если это необходимо, отображает изменения.
			       При вызове регистр EBX должен содержать
			       абсолютный адрес измененной ячейки памяти.

Таблица 2. Таблица данных CPU
Смещение Длина     Имя поля    Описание
+0000h   DWORD     RegPC       Регистр PC.
+0004h   DWORD     RegSP       Регистр SP.
+0008h   DWORD     RegIX       Регистр IX.
+000Ch   DWORD     RegIY       Регистр IY.
+0010h   DWORD     RegAF       Регистр AF.
+0014h   DWORD     RegBC       Регистр BC.
+0018h   DWORD     RegDE       Регистр DE.
+001Ch   DWORD     RegHL       Регистр HL.
+0020h   DWORD     RegAFa      Регистр AF'.
+0024h   DWORD     RegBCa      Регистр BC'.
+0028h   DWORD     RegDEa      Регистр DE'.
+002Ch   DWORD     RegHLa      Регистр HL'.
+0030h   BYTE      RegR        Регистр R.
+0031h   BYTE      RegI        Регистр I.
+0032h   WORD      Halt        Флаг команды HALT.
			       0000h - команда HALT не выполняется;
			       0001h - выполняется команда HALT.
+0034h   BYTE      IFF2        Триггер прерываний IFF2.
			       00h - триггер сброшен;
			       04h - триггер установлен.
+0035h   BYTE      IFF1        Триггер прерываний IFF1.
			       00h - триггер сброшен (прерывания запрещены);
			       04h - триггер установлен (прерывания разрешены).
+0038h   BYTE      IM          Режим обработки прерываний (0,1 или 2).

Таблица 3. Таблица данных AY
Смещение Длина     Имя поля    Описание
+0000h   10h BYTEs RegData     Значения регистров AY.
+0010h   DWORD     RegIndex    Выбранный регистр AY.
+0014h   DWORD     EnvCurrect  Текущее значение уровня огибающей AY. Диапазон
			       принимаемых значений: 00000000h (минимальное
			       значение) - 7FFFFFFFh (максимальное значение).
+0018h   DWORD     EnvDelta    Изменение значения огибающей между
			       прерываниями. Зависит от установленной частоты
			       прерываний таймера и частоты огибающей AY.
			       Может принимать значения: от 00000001h
			       до 80000000h (80000000h - расчетное значение
			       этого параметра лежит за пределами допустимых
			       значений: сильные искажения при воспроизведении
			       огибающей).
+001Ch   BYTE      EnvStatus   Состояние огибающей AY:
			       0 - неизменно, 1 - возрастание, 2 - убывание.

Таблица 4. Таблица данных контроллера дисковода
Смещение Длина     Имя поля    Описание
+0000h   BYTE      DataIO      Значение, которое передается через порт.
+0001h   BYTE      OperIO      Операция ВГ.
			       00h (DC_READSTATUS) - чтение состояния ВГ
				 (вызов при чтении из порта 1Fh).
			       01h (DC_WRITECOMMAND) - запись команды ВГ
				 (вызов при записи в порт 1Fh).
			       02h (DC_READTRACK) - чтение дорожки (вызов при
				 чтении из порта 3Fh).
			       03h (DC_WRITETRACK) - запись дорожки (вызов при
				 записи в порт 3Fh).
			       04h (DC_READSECTOR) - чтение сектора (вызов при
				 чтении из порта 5Fh).
			       05h (DC_WRITESECTOR) - запись сектора (вызов
				 при записи в порт 5Fh).
			       06h (DC_READDATA) - чтение данных (вызов при
				 чтении из порта 7Fh).
			       07h (DC_WRITEDATA) - запись данных (вызов при
				 записи в порт 7Fh).
			       08h (DC_READDRQINTRQ) - чтение сигналов Intrq и
				 Drq (вызов при чтении из порта FFh).
			       09h (DC_WRITESYSTEM) - запись системного
				 регистра контроллера дисководов (вызов при
				 записи в порт FFh).
			       0Ah (DC_INIT) - инициализация диска (вызов при
				 включении эмуляции и смене диска). При вызове
				 этой функции текущая директория - директория
				 с файлами образа диска.
			       0Bh (DC_UNINIT) - снятие диска (вызов при
				 выключении эмуляции и смене диска).
			       0Ch (DC_RESET) - Reset контроллера дисковода.
+0002h   BYTE      RegStatus   Регистр состояния ВГ.
+0003h   BYTE      RegCom      Регистр команды ВГ.
+0004h   BYTE      RegTrack    Регистр дорожки ВГ.
+0005h   BYTE      RegSect     Регистр сектора ВГ.
+0006h   BYTE      RegData     Регистр данных ВГ.
+0008h   BYTE      System      Системный регистр контроллера дисковода
			       (Значение, записанное в порт FF при активном
			       TR-DOS).
+0009h   BYTE      StepDirect  Направление шага: -01 - назад; 01 - вперед.
+000Ah   04h BYTEs TrackReal   Положения головок дисководов.


                 Изменение обработки команд процессора

Чтобы ввести новую команду процессора нужно изменить адрес подпрограммы
обработки команды процессора на новый (в таблице, на которую указывает
OpCPU). При выходе модуль должен восстанавливать адрес первоначальной
подпрограммы. Подпрограмма должна иметь короткий тип (NEAR).

Вход:  EAX - код команды
       CH  - 3 и 5 биты флагового регистра
       CL  - младшие 7 бит регистра R
       DH  - регистр A
       DL  - регистр F (кроме 3 и 5 битов)
       ESI - регистр SP
       EDI - регистр PC
       EBP - указатель на регистр IX или IY (если выполняется команда
	     с префиксами DD или FD)
       EBX - указатель на ячейку (если выполняется команда с префиксами
	     DDCB или FDCB)

Выход: CH  - 3 и 5 биты флагового регистра
       CL  - младшие 7 бит регистра R
       DH  - регистр A
       DL  - регистр F (кроме 3 и 5 битов)
       ESI - регистр SP
       EDI - регистр PC


                                Память

Для выделения и освобождения памяти Вы можете использовать подпрограммы
эмулятора, доступные модулям.

С помощью подпрограммы void *MemAlloc(unsigned Size) можно выделить
память. При вызове подпрограммы в регистре EAX должен находиться размер
необходимой памяти в байтах. Если при возврате из подпрограммы в регистре
EAX ненулевое значение, то память выделена и регистр EAX содержит адрес
буфера памяти, иначе память не выделена.

Для освобождения памяти используйте подпрограмму void MemFree(void *Pnt).
При вызове регистр EAX должен содержать адрес буфера освобождаемой памяти.

Для выделения и освобождения памяти в первом MB используйте функции DPMI
(эти функции описаны в спецификации DPMI).


                                Режимы

Для переключения видеорежимов в эмуляторе присутствуют несколько
подпрограмм, доступных модулям.

Подпрограмма TextMode включает текстовый режим (режим, в котором работает
интерфейс эмулятора), выключает эмуляцию всех устройств и заполняет экран
текстурой. Если Вы хотите использовать интерфейс эмулятора из подпрограмм
модуля, которые запускаются в видеорежиме эмуляции (например _F7_,
_F8_...), то перед выводом окон на экран, нужно вызвать подпрограмму
TextMode.

Подпрограмма SpecMode включает видеорежим эмуляции ZX-Spectrum, и
устанавливает экран в соответствии с содержимым видеопамяти Spectrum.

Подпрограмма SetSpec помимо того, что делает подпрограмма SpecMode,
устанавливает рабочие режимы устройств (AY, контроллер дисковода...). Если
в подпрограмме, которая вызывается из режима эмуляции, Вы изменили
видеорежим, используя подпрограмму TextMode, то перед возвратом
используйте функцию SetSpec для восстановления режима, который Вы изменили.


                             Трассировка

Эмулятор поддерживает режим трассировки. Если включен режим трассировки,
то после каждой команды процессора вызывается подпрограмма "_CPU". В режиме
трассировки эмулятор работает медленее и не происходит настройка на
быстродействие.

Для включения трассировки используйте подпрограмму CPUTraceOn, для
выключения - CPUTraceOff. Чтобы проверить, включена ли трассировка, можно
пользоваться флагом Trace (этот флаг установлен, если трассировка включена
хотя бы одним из модулей).

При вызове функций CPUTraceOn и CPUTraceOff в регистре EBX должен находится
идентификационный номер модуля, который передается в модуль в качестве
одного из параметров функции _INI.


          Использование сохранения конфигурации эмулятора

Для использования сохранения конфигурации эмулятора модуль должен
содержать таблицу "_CFG" (таблица 5).

Таблица 5. Таблица данных о конфигурации модуля.
Смещение Длина     Имя поля    Описание
+0000h   DWORD     Cfg         Адрес таблицы данных конфигурации (таблица 6).
+0004h   DWORD     Num         Количество элементов в таблице данных
			       конфигурации.

Таблица 6. Таблица данных конфигурации.
Смещение Длина     Имя поля    Описание
+0000h   BYTE      Type	       Тип элемента конфигурации.
			       00h (TTxt) - строка.
			       01h (TTbl) - переключатель.
			       02h (TNum) - число.
			       03h - зарезервировано.
			       04h - зарезервировано.
+0001h   DWORD     Txt	       Адрес строки для опции.
+0005h   DWORD     C,CTxt,     Адрес таблицы данных об элементе конфигурации.
		   CTbl,CNum   Таблицы для элементов имеют формат, зависимый
			       от типа элемента (таблицы 7 - 9).

Таблица 7. Таблица данных об элементе "Строка".
Смещение Длина     Имя поля    Описание
+0000h   DWORD     Dst	       Адрес строки.
+0004h   DWORD     Siz         Максимальная длина строки.

Таблица 8. Таблица данных об элементе "Переключатель".
Смещение Длина     Имя поля    Описание
+0000h   DWORD     Dst         Адрес значения переключателя.
+0004h   DWORD     Val         Адрес таблицы, содержащей адреса текстовых
			       значений для переключателя.
+0008h   DWORD     ValN	       Количество значений переключателя.

Таблица 9. Таблица данных об элементе "Число".
Смещение Длина     Имя поля    Описание
+0000h   DWORD     Dst	       Адрес значения.
+0004h   DWORD     Min	       Минимальное значение.
+0008h   DWORD     Max	       Максимальное значение.


                 Использование интерфейса эмулятора

Модулям доступны функции для использования интерфейса эмулятора. Включаемый
файл EMUDATA.INC имеет макрокоманды для более удобного использования данных
функций на языке Assembler. Параметр Reg во всех макрокомандах - регистр,
который используется для адрессации таблицы данных эмулятора. Этот регистр
должен содержать адрес таблицы данных до макрокоманды.


Функция WinCreate
Создание окна и его изображение на экране

  Объявления
    void* WinCreate(int X,int Y,int dX,int dY,unsigned char C);
    MACRO MWinCreate Reg,X,Y,dX,dY,C

  Вход:
    EAX  X      - X-координата окна (от 0 до 79)
    EBX  Y      - Y-координата окна (от 0 до 24)
    ECX  dX     - горизонтальный размер окна
    EDX  dY     - вертикальный размер окна
    ESI  C      - цвет (стандартный цвет - 1Fh)

  Выход:
    EAX  return - адрес данных об окне.


Функция WinRemove
Удаление окна

  Объявления
    void WinRemove(void *Pnt);
    MACRO MWinRemove Reg,Pnt

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate.


Функция WinTitle
Установка заголовка окна

  Объявления
    void WinTitle(void *Pnt,char *Txt,unsigned char C);
    MACRO MWinTitle Reg,Pnt,Txt,C

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate
    EBX  Txt    - адрес строки с названием окна
    ECX  C      - цвет (стандартный цвет - F0h)


Функция WinHelp
Установка помощи для окна

  Объявления
    void WinHelp(void *Pnt,int dX,int dY,char *Txt);
    MACRO MWinHelp Reg,Pnt,dX,dY,Txt

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate
    EBX  dX     - горизонтальный (по X) размер окна помощи
    ECX  dY     - вертикальный (по Y) размер окна помощи
    EDX  Txt    - адрес текста помощи


Функция WinText
Печать текста в окно

  Объявления
    void WinText(void *Pnt,int X,int Y,char *Txt);
    MACRO MWinText Reg,Pnt,X,Y,Txt

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate
    EBX  X      - X-координата начала печати в окне
    ECX  Y      - Y-координата начала печати в окне
    EDX  Txt    - адрес текста


Функция WinExe
Запуск интерфейса окна

  Объявления
    int WinExe(void *Pnt);
    MACRO MWinExe Reg,Pnt

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate

  Выход:
    EAX  return - код выхода (код кнопки, которая была нажата, если выход
                  был осуществлен клавишей Esc, то 0)


Функция WinResult
Установка выбранных в окне опций

  Объявления
    void WinResult(void *Pnt);
    MACRO MWinResult Reg,Pnt

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate


Функция SetButton
Установка кнопки

  Объявления
    void *SetButton(void *Pnt,int X,int Y,int dX,char *Txt, int Id);
    MACRO MSetButton Reg,Pnt,X,Y,Txt,Dst

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate
    EBX  X      - X-координата кнопки
    ECX  Y      - Y-координата кнопки
    EDX  Txt    - адрес текста (перед горячей клавишей ставится код 1)
    ESI  dX     - длина кнопки
    EDI  Id     - код кнопки


Функция SetCheckBox
Установка флажка

  Объявления
    void *SetCheckBox(void *Pnt,int X,int Y,char *Txt,unsigned *Dst);
    MACRO MSetCheckBox Reg,Pnt,X,Y,Txt,Dst

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate
    EBX  X      - X-координата кнопки
    ECX  Y      - Y-координата кнопки
    EDX  Txt    - адрес текста (переход на следущую строку 0Ah, перед
                  горячей клавишей ставится код 1)
    EDI  Dst    - адрес значения флажка


Функция SetRadio. Установка переключателя.

  Объявления
    void *SetRadio(void *Pnt,int X,int Y,char *Txt,CnTbl *Dst);
    MACRO MSetRadio Reg,Pnt,X,Y,Txt,Dst

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate
    EBX  X      - X-координата кнопки
    ECX  Y      - Y-координата кнопки
    EDX  Txt    - адрес текста (перед горячей клавишей ставится код 1)
    EDI  Dst    - адрес таблицы данных о переключателе (Таблица 8)


Функция SetInputTxt
Установка строки ввода

  Объявления
    void *SetInputTxt(void *Pnt,int X,int Y,int dX,char *Txt,CnTxt *Dst);
    MACRO MSetInputTxt Reg,Pnt,X,Y,dX,Txt,Dst

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate
    EBX  X      - X-координата кнопки
    ECX  Y      - Y-координата кнопки
    EDX  Txt    - адрес текста описания поля ввода (перед горячей клавишей
                  ставится код 1)
    ESI  dX     - видимая длина поля ввода
    EDI  Dst    - адрес таблицы данных о строке (Таблица 7)

  Выход:
    EAX  return - адрес данных о строке


Функция SetInputNum
Установка строки ввода числа

  Объявления
    void *SetInputNum(void *Pnt,int X,int Y,char *Txt,CnNum *Dst);
    MACRO MSetInputNum Reg,Pnt,X,Y,Txt,Dst

  Вход:
    EAX  Pnt    - адрес данных об окне, возвращенный функцией WinCreate
    EBX  X      - X-координата кнопки
    ECX  Y      - Y-координата кнопки
    EDX  Txt    - адрес текста описания поля ввода (перед горячей клавишей
                  ставится код 1)
    EDI  Dst    - адрес таблицы данных о строке (Таблица 9)


Функция FileBox
Выбор имени файла

  Объявления
    void FileBox(void *Pnt,char *Mask,char *Path);
    MACRO MFileBox Reg,Pnt,Mask,Path

  Вход:
    EAX  Pnt    - адрес данных о строке, возвращенный функцией SetInputTxt
    EBX  Mask   - адрес маски для выбора файлов. Маска имеет вид:
	          "Маска1[,Маска2]", например: "*.TRD,*.ROM"
    ECX  Path   - адрес пути, в котором будет начат поиск


Функция MessageBox
Сообщение

  Объявления.
    void MessageBox(const unsigned char C,
        const char *Txt0,const char *Txt1);
    MACRO MMessageBox Reg,C,Txt0,Txt1

  Вход:
    EAX  C      - цвет окна сообщения
    EBX  Txt0   - нулевое текстовое сообщение
    EDX  Txt1   - первое текстовое сообщение


                               Описание

Модуль может содержать описание - строку "_DSC". Строка должна
заканчиваться нулем. Максимальная длина описания 43 символа.


                 Форматы файлов, используемых программой

Файлы ROM (расширение "ROM"). Эти файлы имеют длину 16k (16384 или 4000h) и
являются копиями оригинальных ROM без каких-либо изменений и дополнительной
служебной информации. ROM не требует доработки или адаптации к эмулятору.

Файлы образа диска (расширение "TRD"). Файлы образа диска TR-DOS имеют
длину 640k (655360 или A0000h) и является копией содержимого такой дискеты
без каких-либо изменений и дополнительной служебной информации. Этот формат
файла предназначен только для стандартно форматированных дискет TR-DOS (и
при этом только 2-сторонних 80-дорожечных).

Файлы модуля (расширение "ADD").
Смещение Размер    Описание
+0000h   3 BYTEs   Сигнатура 'Add'.
+0003h   BYTE      Версия файла.
+0004h   DWORD     Битовая маска подпрограмм (Если соответствующий бит
		   включен, то идентификатор присутствует).
		   Бит 00h - _DSC.
		   Бит 01h - _CFG.
		   Бит 02h - _SET.
		   Бит 03h - _INI.
		   Бит 04h - _UNI.
		   Бит 05h - _ON_.
		   Бит 06h - _OFF.
		   Бит 07h - _RES.
		   Бит 08h - _CPU.
		   Бит 09h - _INT.
		   Бит 0Ah - _ITP.
		   Бит 0Bh - _IN_.
		   Бит 0Ch - _INP.
		   Бит 0Dh - _OUT.
		   Бит 0Eh - _OUP.
		   Бит 0Fh - _MEM.
		   Бит 10h - _AY_.
		   Бит 11h - _VG_.
		   Бит 12h - _VGP.
		   Бит 13h - _F7_.
		   Бит 14h - _F8_.
		   Бит 15h - _F9_.
		   Бит 16h - _F10.
		   Бит 17h - _F11.
		   Бит 18h - _F12.
		   Бит 19h - _INS.
+0008h   DWORD     Смещение таблицы смещений подпрограмм. Смещение таблицы
		   указывается от начала файла модуля.
+000Ch   DWORD     Смещение таблицы настройки адресов. Таблица содержит
		   смещения двойных слов, к которым нужно прибавить адрес
		   загрузки модуля. Смещение таблицы указывается от начала
		   файла модуля, смещения настройки адресов - от начала
		   данных.
+0010h   DWORD     Количество элементов в таблице настройки адресов.
+0014h   DWORD     Смещение данных от начала файла.
+0018h   DWORD     Длина инициализированных данных (длина данных в файле).
+001Ch   DWORD     Общая длина данных (неинициализированные данные при
		   загрузке модуля инициализируются нулями).
+[0008h] X DWORDs  Таблица смещений подпрограмм. Смещения подпрограмм
		   указываются от начала данных.
+[000Ch] X DWORDs  Таблица настройки адресов. Таблица содержит смещения
		   двойных слов, к которым нужно прибавить адрес загрузки
		   модуля. Смещения настройки адресов указываются от начала
		   данных.
+[0014h] X VOID    Данные.
